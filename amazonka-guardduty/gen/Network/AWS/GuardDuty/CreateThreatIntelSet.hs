{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TypeFamilies       #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.GuardDuty.CreateThreatIntelSet
-- Copyright   : (c) 2013-2018 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can use this operation.
--
--
module Network.AWS.GuardDuty.CreateThreatIntelSet
    (
    -- * Creating a Request
      createThreatIntelSet
    , CreateThreatIntelSet
    -- * Request Lenses
    , ctisClientToken
    , ctisTags
    , ctisDetectorId
    , ctisName
    , ctisFormat
    , ctisLocation
    , ctisActivate

    -- * Destructuring the Response
    , createThreatIntelSetResponse
    , CreateThreatIntelSetResponse
    -- * Response Lenses
    , ctisrsResponseStatus
    , ctisrsThreatIntelSetId
    ) where

import Network.AWS.GuardDuty.Types
import Network.AWS.Lens
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response

-- | /See:/ 'createThreatIntelSet' smart constructor.
data CreateThreatIntelSet = CreateThreatIntelSet'{_ctisClientToken
                                                  :: !(Maybe Text),
                                                  _ctisTags ::
                                                  !(Maybe (Map Text Text)),
                                                  _ctisDetectorId :: !Text,
                                                  _ctisName :: !Text,
                                                  _ctisFormat ::
                                                  !ThreatIntelSetFormat,
                                                  _ctisLocation :: !Text,
                                                  _ctisActivate :: !Bool}
                              deriving (Eq, Read, Show, Data, Typeable, Generic)

-- | Creates a value of 'CreateThreatIntelSet' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ctisClientToken' - The idempotency token for the create request.
--
-- * 'ctisTags' - The tags to be added to a new threat list resource.
--
-- * 'ctisDetectorId' - The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.
--
-- * 'ctisName' - A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
--
-- * 'ctisFormat' - The format of the file that contains the ThreatIntelSet.
--
-- * 'ctisLocation' - The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
--
-- * 'ctisActivate' - A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
createThreatIntelSet
    :: Text -- ^ 'ctisDetectorId'
    -> Text -- ^ 'ctisName'
    -> ThreatIntelSetFormat -- ^ 'ctisFormat'
    -> Text -- ^ 'ctisLocation'
    -> Bool -- ^ 'ctisActivate'
    -> CreateThreatIntelSet
createThreatIntelSet pDetectorId_ pName_ pFormat_
  pLocation_ pActivate_
  = CreateThreatIntelSet'{_ctisClientToken = Nothing,
                          _ctisTags = Nothing, _ctisDetectorId = pDetectorId_,
                          _ctisName = pName_, _ctisFormat = pFormat_,
                          _ctisLocation = pLocation_,
                          _ctisActivate = pActivate_}

-- | The idempotency token for the create request.
ctisClientToken :: Lens' CreateThreatIntelSet (Maybe Text)
ctisClientToken = lens _ctisClientToken (\ s a -> s{_ctisClientToken = a})

-- | The tags to be added to a new threat list resource.
ctisTags :: Lens' CreateThreatIntelSet (HashMap Text Text)
ctisTags = lens _ctisTags (\ s a -> s{_ctisTags = a}) . _Default . _Map

-- | The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.
ctisDetectorId :: Lens' CreateThreatIntelSet Text
ctisDetectorId = lens _ctisDetectorId (\ s a -> s{_ctisDetectorId = a})

-- | A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
ctisName :: Lens' CreateThreatIntelSet Text
ctisName = lens _ctisName (\ s a -> s{_ctisName = a})

-- | The format of the file that contains the ThreatIntelSet.
ctisFormat :: Lens' CreateThreatIntelSet ThreatIntelSetFormat
ctisFormat = lens _ctisFormat (\ s a -> s{_ctisFormat = a})

-- | The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
ctisLocation :: Lens' CreateThreatIntelSet Text
ctisLocation = lens _ctisLocation (\ s a -> s{_ctisLocation = a})

-- | A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
ctisActivate :: Lens' CreateThreatIntelSet Bool
ctisActivate = lens _ctisActivate (\ s a -> s{_ctisActivate = a})

instance AWSRequest CreateThreatIntelSet where
        type Rs CreateThreatIntelSet =
             CreateThreatIntelSetResponse
        request = postJSON guardDuty
        response
          = receiveJSON
              (\ s h x ->
                 CreateThreatIntelSetResponse' <$>
                   (pure (fromEnum s)) <*> (x .:> "threatIntelSetId"))

instance Hashable CreateThreatIntelSet where

instance NFData CreateThreatIntelSet where

instance ToHeaders CreateThreatIntelSet where
        toHeaders
          = const
              (mconcat
                 ["Content-Type" =#
                    ("application/x-amz-json-1.1" :: ByteString)])

instance ToJSON CreateThreatIntelSet where
        toJSON CreateThreatIntelSet'{..}
          = object
              (catMaybes
                 [("clientToken" .=) <$> _ctisClientToken,
                  ("tags" .=) <$> _ctisTags,
                  Just ("name" .= _ctisName),
                  Just ("format" .= _ctisFormat),
                  Just ("location" .= _ctisLocation),
                  Just ("activate" .= _ctisActivate)])

instance ToPath CreateThreatIntelSet where
        toPath CreateThreatIntelSet'{..}
          = mconcat
              ["/detector/", toBS _ctisDetectorId,
               "/threatintelset"]

instance ToQuery CreateThreatIntelSet where
        toQuery = const mempty

-- | /See:/ 'createThreatIntelSetResponse' smart constructor.
data CreateThreatIntelSetResponse = CreateThreatIntelSetResponse'{_ctisrsResponseStatus
                                                                  :: !Int,
                                                                  _ctisrsThreatIntelSetId
                                                                  :: !Text}
                                      deriving (Eq, Read, Show, Data, Typeable,
                                                Generic)

-- | Creates a value of 'CreateThreatIntelSetResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ctisrsResponseStatus' - -- | The response status code.
--
-- * 'ctisrsThreatIntelSetId' - The ID of the ThreatIntelSet resource.
createThreatIntelSetResponse
    :: Int -- ^ 'ctisrsResponseStatus'
    -> Text -- ^ 'ctisrsThreatIntelSetId'
    -> CreateThreatIntelSetResponse
createThreatIntelSetResponse pResponseStatus_
  pThreatIntelSetId_
  = CreateThreatIntelSetResponse'{_ctisrsResponseStatus
                                    = pResponseStatus_,
                                  _ctisrsThreatIntelSetId = pThreatIntelSetId_}

-- | -- | The response status code.
ctisrsResponseStatus :: Lens' CreateThreatIntelSetResponse Int
ctisrsResponseStatus = lens _ctisrsResponseStatus (\ s a -> s{_ctisrsResponseStatus = a})

-- | The ID of the ThreatIntelSet resource.
ctisrsThreatIntelSetId :: Lens' CreateThreatIntelSetResponse Text
ctisrsThreatIntelSetId = lens _ctisrsThreatIntelSetId (\ s a -> s{_ctisrsThreatIntelSetId = a})

instance NFData CreateThreatIntelSetResponse where
