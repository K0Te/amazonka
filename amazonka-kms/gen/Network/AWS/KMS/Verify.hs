{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TypeFamilies       #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.KMS.Verify
-- Copyright   : (c) 2013-2018 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Verifies a digital signature that was generated by the 'Sign' operation. 
--
--
--
--
-- Verification confirms that an authorized user signed the message with the specified CMK and signing algorithm, and the message hasn't changed since it was signed. If the signature is verified, the value of the @SignatureValid@ field in the response is @True@ . If the signature verification fails, the @Verify@ operation fails with an @KMSInvalidSignatureException@ exception.
--
-- A digital signature is generated by using the private key in an asymmetric CMK. The signature is verified by using the public key in the same asymmetric CMK. For information about symmetric and asymmetric CMKs, see <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html Using Symmetric and Asymmetric CMKs> in the /AWS Key Management Service Developer Guide/ .
--
-- To verify a digital signature, you can use the @Verify@ operation. Specify the same asymmetric CMK, message, and signing algorithm that were used to produce the signature.
--
-- You can also verify the digital signature by using the public key of the CMK outside of AWS KMS. Use the 'GetPublicKey' operation to download the public key in the asymmetric CMK and then use the public key to verify the signature outside of AWS KMS. The advantage of using the @Verify@ operation is that it is performed within AWS KMS. As a result, it's easy to call, the operation is performed within the FIPS boundary, it is logged in AWS CloudTrail, and you can use key policy and IAM policy to determine who is authorized to use the CMK to verify signatures.
--
-- The CMK that you use for this operation must be in a compatible key state. For details, see <https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html How Key State Affects Use of a Customer Master Key> in the /AWS Key Management Service Developer Guide/ .
--
module Network.AWS.KMS.Verify
    (
    -- * Creating a Request
      verify
    , Verify
    -- * Request Lenses
    , vMessageType
    , vGrantTokens
    , vKeyId
    , vMessage
    , vSignature
    , vSigningAlgorithm

    -- * Destructuring the Response
    , verifyResponse
    , VerifyResponse
    -- * Response Lenses
    , vrsSigningAlgorithm
    , vrsSignatureValid
    , vrsKeyId
    , vrsResponseStatus
    ) where

import Network.AWS.KMS.Types
import Network.AWS.Lens
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response

-- | /See:/ 'verify' smart constructor.
data Verify = Verify'{_vMessageType ::
                      !(Maybe MessageType),
                      _vGrantTokens :: !(Maybe [Text]), _vKeyId :: !Text,
                      _vMessage :: !(Sensitive Base64),
                      _vSignature :: !Base64,
                      _vSigningAlgorithm :: !SigningAlgorithmSpec}
                deriving (Eq, Show, Data, Typeable, Generic)

-- | Creates a value of 'Verify' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vMessageType' - Tells AWS KMS whether the value of the @Message@ parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter @DIGEST@ . /Important:/ Use the @DIGEST@ value only when the value of the @Message@ parameter is a message digest. If you use the @DIGEST@ value with a raw message, the security of the verification operation can be compromised.
--
-- * 'vGrantTokens' - A list of grant tokens. For more information, see <https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token Grant Tokens> in the /AWS Key Management Service Developer Guide/ .
--
-- * 'vKeyId' - Identifies the asymmetric CMK that will be used to verify the signature. This must be the same CMK that was used to generate the signature. If you specify a different CMK, the signature verification fails. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with @"alias/"@ . To specify a CMK in a different AWS account, you must use the key ARN or alias ARN. For example:     * Key ID: @1234abcd-12ab-34cd-56ef-1234567890ab@      * Key ARN: @arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab@      * Alias name: @alias/ExampleAlias@      * Alias ARN: @arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias@  To get the key ID and key ARN for a CMK, use 'ListKeys' or 'DescribeKey' . To get the alias name and alias ARN, use 'ListAliases' .
--
-- * 'vMessage' - Specifies the message that was signed. You can submit a raw message of up to 4096 bytes, or a hash digest of the message. If you submit a digest, use the @MessageType@ parameter with a value of @DIGEST@ . If the message specified here is different from the message that was signed, the signature verification fails. A message and its hash digest are considered to be the same message.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
--
-- * 'vSignature' - The signature that the @Sign@ operation generated.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
--
-- * 'vSigningAlgorithm' - The signing algorithm that was used to sign the message. If you submit a different algorithm, the signature verification fails.
verify
    :: Text -- ^ 'vKeyId'
    -> ByteString -- ^ 'vMessage'
    -> ByteString -- ^ 'vSignature'
    -> SigningAlgorithmSpec -- ^ 'vSigningAlgorithm'
    -> Verify
verify pKeyId_ pMessage_ pSignature_
  pSigningAlgorithm_
  = Verify'{_vMessageType = Nothing,
            _vGrantTokens = Nothing, _vKeyId = pKeyId_,
            _vMessage = _Sensitive . _Base64 # pMessage_,
            _vSignature = _Base64 # pSignature_,
            _vSigningAlgorithm = pSigningAlgorithm_}

-- | Tells AWS KMS whether the value of the @Message@ parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter @DIGEST@ . /Important:/ Use the @DIGEST@ value only when the value of the @Message@ parameter is a message digest. If you use the @DIGEST@ value with a raw message, the security of the verification operation can be compromised.
vMessageType :: Lens' Verify (Maybe MessageType)
vMessageType = lens _vMessageType (\ s a -> s{_vMessageType = a})

-- | A list of grant tokens. For more information, see <https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token Grant Tokens> in the /AWS Key Management Service Developer Guide/ .
vGrantTokens :: Lens' Verify [Text]
vGrantTokens = lens _vGrantTokens (\ s a -> s{_vGrantTokens = a}) . _Default . _Coerce

-- | Identifies the asymmetric CMK that will be used to verify the signature. This must be the same CMK that was used to generate the signature. If you specify a different CMK, the signature verification fails. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with @"alias/"@ . To specify a CMK in a different AWS account, you must use the key ARN or alias ARN. For example:     * Key ID: @1234abcd-12ab-34cd-56ef-1234567890ab@      * Key ARN: @arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab@      * Alias name: @alias/ExampleAlias@      * Alias ARN: @arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias@  To get the key ID and key ARN for a CMK, use 'ListKeys' or 'DescribeKey' . To get the alias name and alias ARN, use 'ListAliases' .
vKeyId :: Lens' Verify Text
vKeyId = lens _vKeyId (\ s a -> s{_vKeyId = a})

-- | Specifies the message that was signed. You can submit a raw message of up to 4096 bytes, or a hash digest of the message. If you submit a digest, use the @MessageType@ parameter with a value of @DIGEST@ . If the message specified here is different from the message that was signed, the signature verification fails. A message and its hash digest are considered to be the same message.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
vMessage :: Lens' Verify ByteString
vMessage = lens _vMessage (\ s a -> s{_vMessage = a}) . _Sensitive . _Base64

-- | The signature that the @Sign@ operation generated.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
vSignature :: Lens' Verify ByteString
vSignature = lens _vSignature (\ s a -> s{_vSignature = a}) . _Base64

-- | The signing algorithm that was used to sign the message. If you submit a different algorithm, the signature verification fails.
vSigningAlgorithm :: Lens' Verify SigningAlgorithmSpec
vSigningAlgorithm = lens _vSigningAlgorithm (\ s a -> s{_vSigningAlgorithm = a})

instance AWSRequest Verify where
        type Rs Verify = VerifyResponse
        request = postJSON kms
        response
          = receiveJSON
              (\ s h x ->
                 VerifyResponse' <$>
                   (x .?> "SigningAlgorithm") <*>
                     (x .?> "SignatureValid")
                     <*> (x .?> "KeyId")
                     <*> (pure (fromEnum s)))

instance Hashable Verify where

instance NFData Verify where

instance ToHeaders Verify where
        toHeaders
          = const
              (mconcat
                 ["X-Amz-Target" =#
                    ("TrentService.Verify" :: ByteString),
                  "Content-Type" =#
                    ("application/x-amz-json-1.1" :: ByteString)])

instance ToJSON Verify where
        toJSON Verify'{..}
          = object
              (catMaybes
                 [("MessageType" .=) <$> _vMessageType,
                  ("GrantTokens" .=) <$> _vGrantTokens,
                  Just ("KeyId" .= _vKeyId),
                  Just ("Message" .= _vMessage),
                  Just ("Signature" .= _vSignature),
                  Just ("SigningAlgorithm" .= _vSigningAlgorithm)])

instance ToPath Verify where
        toPath = const "/"

instance ToQuery Verify where
        toQuery = const mempty

-- | /See:/ 'verifyResponse' smart constructor.
data VerifyResponse = VerifyResponse'{_vrsSigningAlgorithm
                                      :: !(Maybe SigningAlgorithmSpec),
                                      _vrsSignatureValid :: !(Maybe Bool),
                                      _vrsKeyId :: !(Maybe Text),
                                      _vrsResponseStatus :: !Int}
                        deriving (Eq, Read, Show, Data, Typeable, Generic)

-- | Creates a value of 'VerifyResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vrsSigningAlgorithm' - The signing algorithm that was used to verify the signature.
--
-- * 'vrsSignatureValid' - A Boolean value that indicates whether the signature was verified. A value of @True@ indicates that the @Signature@ was produced by signing the @Message@ with the specified @KeyID@ and @SigningAlgorithm.@ If the signature is not verified, the @Verify@ operation fails with a @KMSInvalidSignatureException@ exception. 
--
-- * 'vrsKeyId' - The Amazon Resource Name (<https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN key ARN> ) of the asymmetric CMK that was used to verify the signature.
--
-- * 'vrsResponseStatus' - -- | The response status code.
verifyResponse
    :: Int -- ^ 'vrsResponseStatus'
    -> VerifyResponse
verifyResponse pResponseStatus_
  = VerifyResponse'{_vrsSigningAlgorithm = Nothing,
                    _vrsSignatureValid = Nothing, _vrsKeyId = Nothing,
                    _vrsResponseStatus = pResponseStatus_}

-- | The signing algorithm that was used to verify the signature.
vrsSigningAlgorithm :: Lens' VerifyResponse (Maybe SigningAlgorithmSpec)
vrsSigningAlgorithm = lens _vrsSigningAlgorithm (\ s a -> s{_vrsSigningAlgorithm = a})

-- | A Boolean value that indicates whether the signature was verified. A value of @True@ indicates that the @Signature@ was produced by signing the @Message@ with the specified @KeyID@ and @SigningAlgorithm.@ If the signature is not verified, the @Verify@ operation fails with a @KMSInvalidSignatureException@ exception. 
vrsSignatureValid :: Lens' VerifyResponse (Maybe Bool)
vrsSignatureValid = lens _vrsSignatureValid (\ s a -> s{_vrsSignatureValid = a})

-- | The Amazon Resource Name (<https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN key ARN> ) of the asymmetric CMK that was used to verify the signature.
vrsKeyId :: Lens' VerifyResponse (Maybe Text)
vrsKeyId = lens _vrsKeyId (\ s a -> s{_vrsKeyId = a})

-- | -- | The response status code.
vrsResponseStatus :: Lens' VerifyResponse Int
vrsResponseStatus = lens _vrsResponseStatus (\ s a -> s{_vrsResponseStatus = a})

instance NFData VerifyResponse where
