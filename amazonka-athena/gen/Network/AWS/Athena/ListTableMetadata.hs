{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TypeFamilies       #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListTableMetadata
-- Copyright   : (c) 2013-2018 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the metadata for the tables in the specified data catalog database.
--
--
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListTableMetadata
    (
    -- * Creating a Request
      listTableMetadata
    , ListTableMetadata
    -- * Request Lenses
    , ltmNextToken
    , ltmExpression
    , ltmMaxResults
    , ltmCatalogName
    , ltmDatabaseName

    -- * Destructuring the Response
    , listTableMetadataResponse
    , ListTableMetadataResponse
    -- * Response Lenses
    , ltmrsNextToken
    , ltmrsTableMetadataList
    , ltmrsResponseStatus
    ) where

import Network.AWS.Athena.Types
import Network.AWS.Lens
import Network.AWS.Pager
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response

-- | /See:/ 'listTableMetadata' smart constructor.
data ListTableMetadata = ListTableMetadata'{_ltmNextToken
                                            :: !(Maybe Text),
                                            _ltmExpression :: !(Maybe Text),
                                            _ltmMaxResults :: !(Maybe Nat),
                                            _ltmCatalogName :: !Text,
                                            _ltmDatabaseName :: !Text}
                           deriving (Eq, Read, Show, Data, Typeable, Generic)

-- | Creates a value of 'ListTableMetadata' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltmNextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- * 'ltmExpression' - A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
--
-- * 'ltmMaxResults' - Specifies the maximum number of results to return.
--
-- * 'ltmCatalogName' - The name of the data catalog for which table metadata should be returned.
--
-- * 'ltmDatabaseName' - The name of the database for which table metadata should be returned.
listTableMetadata
    :: Text -- ^ 'ltmCatalogName'
    -> Text -- ^ 'ltmDatabaseName'
    -> ListTableMetadata
listTableMetadata pCatalogName_ pDatabaseName_
  = ListTableMetadata'{_ltmNextToken = Nothing,
                       _ltmExpression = Nothing, _ltmMaxResults = Nothing,
                       _ltmCatalogName = pCatalogName_,
                       _ltmDatabaseName = pDatabaseName_}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
ltmNextToken :: Lens' ListTableMetadata (Maybe Text)
ltmNextToken = lens _ltmNextToken (\ s a -> s{_ltmNextToken = a})

-- | A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
ltmExpression :: Lens' ListTableMetadata (Maybe Text)
ltmExpression = lens _ltmExpression (\ s a -> s{_ltmExpression = a})

-- | Specifies the maximum number of results to return.
ltmMaxResults :: Lens' ListTableMetadata (Maybe Natural)
ltmMaxResults = lens _ltmMaxResults (\ s a -> s{_ltmMaxResults = a}) . mapping _Nat

-- | The name of the data catalog for which table metadata should be returned.
ltmCatalogName :: Lens' ListTableMetadata Text
ltmCatalogName = lens _ltmCatalogName (\ s a -> s{_ltmCatalogName = a})

-- | The name of the database for which table metadata should be returned.
ltmDatabaseName :: Lens' ListTableMetadata Text
ltmDatabaseName = lens _ltmDatabaseName (\ s a -> s{_ltmDatabaseName = a})

instance AWSPager ListTableMetadata where
        page rq rs
          | stop (rs ^. ltmrsNextToken) = Nothing
          | stop (rs ^. ltmrsTableMetadataList) = Nothing
          | otherwise =
            Just $ rq & ltmNextToken .~ rs ^. ltmrsNextToken

instance AWSRequest ListTableMetadata where
        type Rs ListTableMetadata = ListTableMetadataResponse
        request = postJSON athena
        response
          = receiveJSON
              (\ s h x ->
                 ListTableMetadataResponse' <$>
                   (x .?> "NextToken") <*>
                     (x .?> "TableMetadataList" .!@ mempty)
                     <*> (pure (fromEnum s)))

instance Hashable ListTableMetadata where

instance NFData ListTableMetadata where

instance ToHeaders ListTableMetadata where
        toHeaders
          = const
              (mconcat
                 ["X-Amz-Target" =#
                    ("AmazonAthena.ListTableMetadata" :: ByteString),
                  "Content-Type" =#
                    ("application/x-amz-json-1.1" :: ByteString)])

instance ToJSON ListTableMetadata where
        toJSON ListTableMetadata'{..}
          = object
              (catMaybes
                 [("NextToken" .=) <$> _ltmNextToken,
                  ("Expression" .=) <$> _ltmExpression,
                  ("MaxResults" .=) <$> _ltmMaxResults,
                  Just ("CatalogName" .= _ltmCatalogName),
                  Just ("DatabaseName" .= _ltmDatabaseName)])

instance ToPath ListTableMetadata where
        toPath = const "/"

instance ToQuery ListTableMetadata where
        toQuery = const mempty

-- | /See:/ 'listTableMetadataResponse' smart constructor.
data ListTableMetadataResponse = ListTableMetadataResponse'{_ltmrsNextToken
                                                            :: !(Maybe Text),
                                                            _ltmrsTableMetadataList
                                                            ::
                                                            !(Maybe
                                                                [TableMetadata]),
                                                            _ltmrsResponseStatus
                                                            :: !Int}
                                   deriving (Eq, Read, Show, Data, Typeable,
                                             Generic)

-- | Creates a value of 'ListTableMetadataResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltmrsNextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- * 'ltmrsTableMetadataList' - A list of table metadata.
--
-- * 'ltmrsResponseStatus' - -- | The response status code.
listTableMetadataResponse
    :: Int -- ^ 'ltmrsResponseStatus'
    -> ListTableMetadataResponse
listTableMetadataResponse pResponseStatus_
  = ListTableMetadataResponse'{_ltmrsNextToken =
                                 Nothing,
                               _ltmrsTableMetadataList = Nothing,
                               _ltmrsResponseStatus = pResponseStatus_}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
ltmrsNextToken :: Lens' ListTableMetadataResponse (Maybe Text)
ltmrsNextToken = lens _ltmrsNextToken (\ s a -> s{_ltmrsNextToken = a})

-- | A list of table metadata.
ltmrsTableMetadataList :: Lens' ListTableMetadataResponse [TableMetadata]
ltmrsTableMetadataList = lens _ltmrsTableMetadataList (\ s a -> s{_ltmrsTableMetadataList = a}) . _Default . _Coerce

-- | -- | The response status code.
ltmrsResponseStatus :: Lens' ListTableMetadataResponse Int
ltmrsResponseStatus = lens _ltmrsResponseStatus (\ s a -> s{_ltmrsResponseStatus = a})

instance NFData ListTableMetadataResponse where
